#include <iostream>
using namespace std;

struct Node {
    string val;
    Node* next;

    Node(string _val) : val(_val), next(nullptr) {}
};

struct list {
    Node* first;
    Node* last;

    list() : first(nullptr), last(nullptr) {}

    bool is_empty() {
        return first == nullptr;
    }

    void push_back(string  _val) {
        Node* p = new Node(_val);
        if (is_empty()) {
            first = p;
            last = p;
            return;
        }
        last->next = p;
        last = p;
    }
    void CreateList() //Формирование списка
 {
   cout << "Insert list, to exit insert\n";
   string NewName="abc"; //присваиваем чему-нибудь чтобы сработал while
   while (!NewName.empty())
   {
     getline (cin,NewName);
     push_back(NewName);
   }
 }
 void remove_first() {
    if (is_empty()) return;
    Node* p = first;
    first = p->next;
    delete p;
}
 void remove_last() {
    if (is_empty()) return;
    if (first == last) {
        remove_first();
        return;
    }
    Node* p = first;
    while (p->next != last) p = p->next;
    p->next = nullptr;
    delete last;
    last = p;
}
 void remove(string _val) { //Удалить заданный элемент. Элемент задан значением поля; удаляется первый элемент
    if (is_empty()) return;
    if (first->val == _val) {
        remove_first();
        return;
    }
    else if (last->val == _val) {
    		remove_last();
        return;
    }
    Node* slow = first;
    Node* fast = first->next;
    while (fast && fast->val != _val) {
        fast = fast->next;
        slow = slow->next;
    }
    if (!fast) {
        cout << "This element does not exist" << endl;
        return;
       }
    slow->next = fast->next;
    delete fast;
    }

    void print() { //Вывод списка
        if (is_empty()) cout <<"Spisok pust";
        Node* p = first;
        while (p) {
            cout << p->val << " ";
            p = p->next;
        }
        cout << endl;
    }
   void RemoveList() { //Уничтожение списка
    if (is_empty()) return;
    Node* p = first->next;
    first=nullptr;
    while (p->next != last) {delete p; p = p->next;}
    remove(p->val);
    cout << "Succsses" << endl;
   }
};

int main() 
{
    
    list l;
    l.CreateList();
    l.print();
    string NameToDelete;
    cout << "Insert Name to remove" << endl;
    cin >> NameToDelete;
    l.remove(NameToDelete);
    cout << "List after remove" << endl;
    l.print();
    cout << "Remove list" << endl;
    l.RemoveList();
    cout << "Printing Removed list" << endl;
    l.print();
    
    return 0;
}
